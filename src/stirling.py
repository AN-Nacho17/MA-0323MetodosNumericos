# -*- coding: utf-8 -*-
"""Stirling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IGV-Z6HRKQS0riY6bATkPQ6VHU9tni4U
"""

import math

def aproximacion_stirling(n):
    return math.pow(n, n) * math.pow(math.e, -n) * math.sqrt(2 * math.pi * n)

def error_absoluto(real, aprox):
  return abs(real - aprox)

def error_relativo(error_absoluto, real):
  try:
    return abs(error_absoluto) / abs(real)
  except ZeroDivisionError:
      return None

nf=0
print(' n', '\t\t\t\t\t', '  n!', '\t\t\t', 'Aproximaci√≥n de Stirling', '\t\t\t', 'Error Absoluto', '\t', 'Error Relativo')
print(' _', '\t\t\t\t\t', '  __', '\t\t\t', '________________________', '\t\t\t', '______________', '\t', '______________')
print()

for x in range (0,26):
    if (x == 0) or (x == 1):
       nf = x
    nf *= x
    aprox = aproximacion_stirling(x)
    error_abs = error_absoluto(nf, aprox)
    if (nf == 0):
      print('{:2.0f}  {:40.0f} {:40.10f} {:40.10f} '.format(
            x, nf,  aprox, error_abs, error_relativo(error_abs, nf)))
    else:
      print('{:2.0f}  {:40.0f} {:40.10f} {:40.10f}         {:20.20f}'.format(
            x, nf,  aprox, error_abs, error_relativo(error_abs, nf)))